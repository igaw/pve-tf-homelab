---
- name: Install guestfs-tools
  ansible.builtin.apt:
    name: guestfs-tools
    state: present

- name: Get VM templates list
  ansible.builtin.shell:
    cmd: |
      qm list
  register: existing_vms
  changed_when: no

- name: Create VM template if not exists
  block:
  - name: Download base image
    ansible.builtin.get_url:
      url: "{{ img_url }}"
      dest: "/tmp/{{ img_filename }}"
  - name: Set default root password
    ansible.builtin.shell:
      cmd: |
        virt-customize -a "/tmp/{{ img_filename }}" --root-password password:root
  - name: Customize debian image
    ansible.builtin.shell:
      cmd: |
        virt-customize -a "/tmp/{{ img_filename }}" --install qemu-guest-agent
    when: vm_name == "debian"
  - name: Customize ubuntu image
    ansible.builtin.shell:
      cmd: |
        virt-customize -a "/tmp/{{ img_filename }}" --install qemu-guest-agent
        virt-customize -a "/tmp/{{ img_filename }}" --run-command "systemctl enable qemu-guest-agent"
    when: vm_name == "ubuntu"
  - name: Customize tumbleweed image
    ansible.builtin.shell:
      cmd: |
       virt-customize -a "/tmp/{{ img_filename }}" --install qemu-guest-agent,systemd-network,cloud-init
        virt-customize -a "/tmp/{{ img_filename }}" --run-command "systemctl enable systemd-networkd"
        virt-customize -a "/tmp/{{ img_filename }}" --run-command "systemctl enable systemd-resolved"
        virt-customize -a "/tmp/{{ img_filename }}" --run-command "systemctl enable cloud-init"
    when: vm_name == "tumbleweed"
  - name: Customize fedora image
    ansible.builtin.shell:
      cmd: |
        virt-customize -a "/tmp/{{ img_filename }}" --install systemd-networkd
        virt-customize -a "/tmp/{{ img_filename }}" --run-command "systemctl mask NetworkManager"
        virt-customize -a "/tmp/{{ img_filename }}" --run-command "systemctl enable systemd-networkd"
        virt-customize -a "/tmp/{{ img_filename }}" --run-command "systemctl enable cloud-init"
    when: vm_name == "fedora"
  - name: Create template
    ansible.builtin.shell:
      cmd: |
        qm create "{{ vm_id }}" --name "{{ vm_name }}" \
          --sockets 1 --cores 2 --vcpu 2 \
          --memory 4096 \
          --net0 virtio,bridge=vmbr0 \
          --hotplug network,disk,cpu,memory \
          --numa 1 \
          --machine q35 \
          --bios ovmf
        qm importdisk "{{ vm_id }}" "{{ img_filename }}" local-lvm
        qm set "{{ vm_id }}" --efidisk0 "local-lvm":1,efitype=4m,pre-enrolled-keys=1
        qm set "{{ vm_id }}" --scsihw virtio-scsi-pci --virtio0 "local-lvm:vm-{{ vm_id }}-disk-0"
        qm set "{{ vm_id }}" --scsi1 "local-lvm":cloudinit
        qm set "{{ vm_id }}" --boot c --bootdisk virtio0
        qm set "{{ vm_id }}" --serial0 socket --vga serial0
        qm set "{{ vm_id }}" --agent enabled=1
        qm template "{{ vm_id }}"
  when: existing_vms.stdout.find(vm_name) == -1
